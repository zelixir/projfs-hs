-- Warning: this file is automatically generated by BindGen.

{-# LANGUAGE DuplicateRecordFields, DataKinds, CPP, RecordWildCards, DeriveGeneric #-}
{- HLINT ignore -}
module System.Win32.ProjFS(
  module System.Win32.ProjFS.Types, 
  module System.Win32.ProjFS.Helper, 
  module System.Win32.ProjFS.GenDir, 
  module System.Win32.ProjFS
) where
import System.Win32.Types
import Data.Maybe
import Data.Default
import GHC.Generics
import Control.Monad
import Control.Arrow
import Foreign.Ptr
import Foreign.Storable
import Foreign.Marshal.StaticArray
import Foreign.Marshal.Alloc
import Foreign.C.Types
import Data.Array.Unboxed
import System.Win32.ProjFS.Types
import System.Win32.ProjFS.Helper
import System.Win32.ProjFS.GenDir
import qualified Data.ByteString as BS

-- Enum PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_TYPES = DWORD
type PRJ_NOTIFY_NONE = 0x00000000
pRJ_NOTIFY_NONE = 0x00000000 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_SUPPRESS_NOTIFICATIONS = 0x00000001
pRJ_NOTIFY_SUPPRESS_NOTIFICATIONS = 0x00000001 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_OPENED = 0x00000002
pRJ_NOTIFY_FILE_OPENED = 0x00000002 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_NEW_FILE_CREATED = 0x00000004
pRJ_NOTIFY_NEW_FILE_CREATED = 0x00000004 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_OVERWRITTEN = 0x00000008
pRJ_NOTIFY_FILE_OVERWRITTEN = 0x00000008 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_PRE_DELETE = 0x00000010
pRJ_NOTIFY_PRE_DELETE = 0x00000010 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_PRE_RENAME = 0x00000020
pRJ_NOTIFY_PRE_RENAME = 0x00000020 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_PRE_SET_HARDLINK = 0x00000040
pRJ_NOTIFY_PRE_SET_HARDLINK = 0x00000040 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_RENAMED = 0x00000080
pRJ_NOTIFY_FILE_RENAMED = 0x00000080 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_HARDLINK_CREATED = 0x00000100
pRJ_NOTIFY_HARDLINK_CREATED = 0x00000100 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_HANDLE_CLOSED_NO_MODIFICATION = 0x00000200
pRJ_NOTIFY_FILE_HANDLE_CLOSED_NO_MODIFICATION = 0x00000200 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_HANDLE_CLOSED_FILE_MODIFIED = 0x00000400
pRJ_NOTIFY_FILE_HANDLE_CLOSED_FILE_MODIFIED = 0x00000400 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_HANDLE_CLOSED_FILE_DELETED = 0x00000800
pRJ_NOTIFY_FILE_HANDLE_CLOSED_FILE_DELETED = 0x00000800 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_FILE_PRE_CONVERT_TO_FULL = 0x00001000
pRJ_NOTIFY_FILE_PRE_CONVERT_TO_FULL = 0x00001000 :: PRJ_NOTIFY_TYPES
type PRJ_NOTIFY_USE_EXISTING_MASK = 0xFFFFFFFF
pRJ_NOTIFY_USE_EXISTING_MASK = 0xFFFFFFFF :: PRJ_NOTIFY_TYPES

-- Enum PRJ_NOTIFICATION
type PRJ_NOTIFICATION = DWORD
type PRJ_NOTIFICATION_FILE_OPENED = 0x00000002
pRJ_NOTIFICATION_FILE_OPENED = 0x00000002 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_NEW_FILE_CREATED = 0x00000004
pRJ_NOTIFICATION_NEW_FILE_CREATED = 0x00000004 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_FILE_OVERWRITTEN = 0x00000008
pRJ_NOTIFICATION_FILE_OVERWRITTEN = 0x00000008 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_PRE_DELETE = 0x00000010
pRJ_NOTIFICATION_PRE_DELETE = 0x00000010 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_PRE_RENAME = 0x00000020
pRJ_NOTIFICATION_PRE_RENAME = 0x00000020 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_PRE_SET_HARDLINK = 0x00000040
pRJ_NOTIFICATION_PRE_SET_HARDLINK = 0x00000040 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_FILE_RENAMED = 0x00000080
pRJ_NOTIFICATION_FILE_RENAMED = 0x00000080 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_HARDLINK_CREATED = 0x00000100
pRJ_NOTIFICATION_HARDLINK_CREATED = 0x00000100 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_FILE_HANDLE_CLOSED_NO_MODIFICATION = 0x00000200
pRJ_NOTIFICATION_FILE_HANDLE_CLOSED_NO_MODIFICATION = 0x00000200 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_FILE_HANDLE_CLOSED_FILE_MODIFIED = 0x00000400
pRJ_NOTIFICATION_FILE_HANDLE_CLOSED_FILE_MODIFIED = 0x00000400 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_FILE_HANDLE_CLOSED_FILE_DELETED = 0x00000800
pRJ_NOTIFICATION_FILE_HANDLE_CLOSED_FILE_DELETED = 0x00000800 :: PRJ_NOTIFICATION
type PRJ_NOTIFICATION_FILE_PRE_CONVERT_TO_FULL = 0x00001000
pRJ_NOTIFICATION_FILE_PRE_CONVERT_TO_FULL = 0x00001000 :: PRJ_NOTIFICATION



-- Struct PRJ_NOTIFICATION_MAPPING
data PRJ_NOTIFICATION_MAPPING = PRJ_NOTIFICATION_MAPPING {
  notificationBitMask :: PRJ_NOTIFY_TYPES, 
  notificationRoot :: PCWSTR
}
  deriving (Show, Generic)
instance Default PRJ_NOTIFICATION_MAPPING
instance Storable PRJ_NOTIFICATION_MAPPING where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES), (alignment &&& sizeOf) (undefined :: PCWSTR)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES), (alignment &&& sizeOf) (undefined :: PCWSTR)]
  poke ptr_ PRJ_NOTIFICATION_MAPPING{..} = 
    void $ poke_ahead notificationBitMask >=> poke_ahead notificationRoot $ ptr_
  peek = auto_peek PRJ_NOTIFICATION_MAPPING


-- Enum PRJ_STARTVIRTUALIZING_FLAGS
type PRJ_STARTVIRTUALIZING_FLAGS = DWORD
type PRJ_FLAG_NONE = 0x00000000
pRJ_FLAG_NONE = 0x00000000 :: PRJ_STARTVIRTUALIZING_FLAGS
type PRJ_FLAG_USE_NEGATIVE_PATH_CACHE = 0x00000001
pRJ_FLAG_USE_NEGATIVE_PATH_CACHE = 0x00000001 :: PRJ_STARTVIRTUALIZING_FLAGS



-- Struct PRJ_STARTVIRTUALIZING_OPTIONS
data PRJ_STARTVIRTUALIZING_OPTIONS = PRJ_STARTVIRTUALIZING_OPTIONS {
  flags :: PRJ_STARTVIRTUALIZING_FLAGS, 
  poolThreadCount :: UINT32, 
  concurrentThreadCount :: UINT32, 
  notificationMappings :: Ptr PRJ_NOTIFICATION_MAPPING, 
  notificationMappingsCount :: UINT32
}
  deriving (Show, Generic)
instance Default PRJ_STARTVIRTUALIZING_OPTIONS
instance Storable PRJ_STARTVIRTUALIZING_OPTIONS where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_STARTVIRTUALIZING_FLAGS), (alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: Ptr PRJ_NOTIFICATION_MAPPING), (alignment &&& sizeOf) (undefined :: UINT32)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_STARTVIRTUALIZING_FLAGS), (alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: Ptr PRJ_NOTIFICATION_MAPPING), (alignment &&& sizeOf) (undefined :: UINT32)]
  poke ptr_ PRJ_STARTVIRTUALIZING_OPTIONS{..} = 
    void $ poke_ahead flags >=> poke_ahead poolThreadCount >=> poke_ahead concurrentThreadCount >=> poke_ahead notificationMappings >=> poke_ahead notificationMappingsCount $ ptr_
  peek = auto_peek PRJ_STARTVIRTUALIZING_OPTIONS


-- Func PrjStartVirtualizing
foreign import ccall unsafe "PrjStartVirtualizing" c_PrjStartVirtualizing :: 
  PCWSTR -> Ptr PRJ_CALLBACKS -> Ptr () -> Ptr PRJ_STARTVIRTUALIZING_OPTIONS -> Ptr PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> IO HRESULT

prjStartVirtualizing' virtualizationRootPath callbacks instanceContext options = 
  convert_result "prjStartVirtualizing" $ prjStartVirtualizing virtualizationRootPath callbacks instanceContext options

prjStartVirtualizing virtualizationRootPath callbacks instanceContext options = 
  withTString virtualizationRootPath $ \virtualizationRootPath_ptr -> 
  withPtr callbacks $ \callbacks_ptr -> 
  withMaybe instanceContext $ \instanceContext_ptr -> 
  withMaybe options $ \options_ptr -> 
  alloca'  $ \namespaceVirtualizationContext_ptr -> do
  ret_ <- c_PrjStartVirtualizing virtualizationRootPath_ptr callbacks_ptr instanceContext_ptr options_ptr namespaceVirtualizationContext_ptr
  namespaceVirtualizationContext_ret_ <- peek namespaceVirtualizationContext_ptr
  return (ret_, namespaceVirtualizationContext_ret_)


-- Func PrjStopVirtualizing
foreign import ccall unsafe "PrjStopVirtualizing" c_PrjStopVirtualizing :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> IO ()

prjStopVirtualizing namespaceVirtualizationContext = 
  c_PrjStopVirtualizing namespaceVirtualizationContext


-- Func PrjClearNegativePathCache
foreign import ccall unsafe "PrjClearNegativePathCache" c_PrjClearNegativePathCache :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> Ptr UINT32 -> IO HRESULT

prjClearNegativePathCache' namespaceVirtualizationContext = 
  convert_result "prjClearNegativePathCache" $ prjClearNegativePathCache namespaceVirtualizationContext

prjClearNegativePathCache namespaceVirtualizationContext = 
  alloca'  $ \totalEntryNumber_ptr -> do
  ret_ <- c_PrjClearNegativePathCache namespaceVirtualizationContext totalEntryNumber_ptr
  totalEntryNumber_ret_ <- peek totalEntryNumber_ptr
  return (ret_, totalEntryNumber_ret_)




-- Struct PRJ_VIRTUALIZATION_INSTANCE_INFO
data PRJ_VIRTUALIZATION_INSTANCE_INFO = PRJ_VIRTUALIZATION_INSTANCE_INFO {
  instanceID :: GUID, 
  writeAlignment :: UINT32
}
  deriving (Show, Generic)
instance Default PRJ_VIRTUALIZATION_INSTANCE_INFO
instance Storable PRJ_VIRTUALIZATION_INSTANCE_INFO where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: GUID), (alignment &&& sizeOf) (undefined :: UINT32)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: GUID), (alignment &&& sizeOf) (undefined :: UINT32)]
  poke ptr_ PRJ_VIRTUALIZATION_INSTANCE_INFO{..} = 
    void $ poke_ahead instanceID >=> poke_ahead writeAlignment $ ptr_
  peek = auto_peek PRJ_VIRTUALIZATION_INSTANCE_INFO


-- Func PrjGetVirtualizationInstanceInfo
foreign import ccall unsafe "PrjGetVirtualizationInstanceInfo" c_PrjGetVirtualizationInstanceInfo :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> Ptr PRJ_VIRTUALIZATION_INSTANCE_INFO -> IO HRESULT

prjGetVirtualizationInstanceInfo' namespaceVirtualizationContext = 
  convert_result "prjGetVirtualizationInstanceInfo" $ prjGetVirtualizationInstanceInfo namespaceVirtualizationContext

prjGetVirtualizationInstanceInfo namespaceVirtualizationContext = 
  alloca'  $ \virtualizationInstanceInfo_ptr -> do
  ret_ <- c_PrjGetVirtualizationInstanceInfo namespaceVirtualizationContext virtualizationInstanceInfo_ptr
  virtualizationInstanceInfo_ret_ <- peek virtualizationInstanceInfo_ptr
  return (ret_, virtualizationInstanceInfo_ret_)


-- Enum PRJ_PLACEHOLDER_ID
type PRJ_PLACEHOLDER_ID = DWORD
type PRJ_PLACEHOLDER_ID_LENGTH = 128
pRJ_PLACEHOLDER_ID_LENGTH = 128 :: PRJ_PLACEHOLDER_ID



-- Struct PRJ_PLACEHOLDER_VERSION_INFO
data PRJ_PLACEHOLDER_VERSION_INFO = PRJ_PLACEHOLDER_VERSION_INFO {
  providerID :: StaticArray UArray PRJ_PLACEHOLDER_ID_LENGTH UINT8, 
  contentID :: StaticArray UArray PRJ_PLACEHOLDER_ID_LENGTH UINT8
}
  deriving (Show, Generic)
instance Default PRJ_PLACEHOLDER_VERSION_INFO
instance Storable PRJ_PLACEHOLDER_VERSION_INFO where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: StaticArray UArray PRJ_PLACEHOLDER_ID_LENGTH UINT8), (alignment &&& sizeOf) (undefined :: StaticArray UArray PRJ_PLACEHOLDER_ID_LENGTH UINT8)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: StaticArray UArray PRJ_PLACEHOLDER_ID_LENGTH UINT8), (alignment &&& sizeOf) (undefined :: StaticArray UArray PRJ_PLACEHOLDER_ID_LENGTH UINT8)]
  poke ptr_ PRJ_PLACEHOLDER_VERSION_INFO{..} = 
    void $ poke_ahead providerID >=> poke_ahead contentID $ ptr_
  peek = auto_peek PRJ_PLACEHOLDER_VERSION_INFO


-- Func PrjMarkDirectoryAsPlaceholder
foreign import ccall unsafe "PrjMarkDirectoryAsPlaceholder" c_PrjMarkDirectoryAsPlaceholder :: 
  PCWSTR -> PCWSTR -> Ptr PRJ_PLACEHOLDER_VERSION_INFO -> Ptr GUID -> IO HRESULT

prjMarkDirectoryAsPlaceholder' rootPathName targetPathName versionInfo virtualizationInstanceID = 
  convert_result "prjMarkDirectoryAsPlaceholder" $ prjMarkDirectoryAsPlaceholder rootPathName targetPathName versionInfo virtualizationInstanceID

prjMarkDirectoryAsPlaceholder rootPathName targetPathName versionInfo virtualizationInstanceID = 
  withTString rootPathName $ \rootPathName_ptr -> 
  withTStringMaybe targetPathName $ \targetPathName_ptr -> 
  withMaybe versionInfo $ \versionInfo_ptr -> 
  withPtr virtualizationInstanceID $ \virtualizationInstanceID_ptr -> 
  c_PrjMarkDirectoryAsPlaceholder rootPathName_ptr targetPathName_ptr versionInfo_ptr virtualizationInstanceID_ptr




-- Struct PRJ_FILE_BASIC_INFO
data PRJ_FILE_BASIC_INFO = PRJ_FILE_BASIC_INFO {
  isDirectory :: BOOLEAN, 
  fileSize :: INT64, 
  creationTime :: LARGE_INTEGER, 
  lastAccessTime :: LARGE_INTEGER, 
  lastWriteTime :: LARGE_INTEGER, 
  changeTime :: LARGE_INTEGER, 
  fileAttributes :: UINT32
}
  deriving (Show, Generic)
instance Default PRJ_FILE_BASIC_INFO
instance Storable PRJ_FILE_BASIC_INFO where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: BOOLEAN), (alignment &&& sizeOf) (undefined :: INT64), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: UINT32)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: BOOLEAN), (alignment &&& sizeOf) (undefined :: INT64), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: LARGE_INTEGER), (alignment &&& sizeOf) (undefined :: UINT32)]
  poke ptr_ PRJ_FILE_BASIC_INFO{..} = 
    void $ poke_ahead isDirectory >=> poke_ahead fileSize >=> poke_ahead creationTime >=> poke_ahead lastAccessTime >=> poke_ahead lastWriteTime >=> poke_ahead changeTime >=> poke_ahead fileAttributes $ ptr_
  peek = auto_peek PRJ_FILE_BASIC_INFO




-- Struct EaInformation
data EaInformation = EaInformation {
  eaBufferSize :: UINT32, 
  offsetToFirstEa :: UINT32
}
  deriving (Show, Generic)
instance Default EaInformation
instance Storable EaInformation where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32)]
  poke ptr_ EaInformation{..} = 
    void $ poke_ahead eaBufferSize >=> poke_ahead offsetToFirstEa $ ptr_
  peek = auto_peek EaInformation




-- Struct SecurityInformation
data SecurityInformation = SecurityInformation {
  securityBufferSize :: UINT32, 
  offsetToSecurityDescriptor :: UINT32
}
  deriving (Show, Generic)
instance Default SecurityInformation
instance Storable SecurityInformation where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32)]
  poke ptr_ SecurityInformation{..} = 
    void $ poke_ahead securityBufferSize >=> poke_ahead offsetToSecurityDescriptor $ ptr_
  peek = auto_peek SecurityInformation




-- Struct StreamsInformation
data StreamsInformation = StreamsInformation {
  streamsInfoBufferSize :: UINT32, 
  offsetToFirstStreamInfo :: UINT32
}
  deriving (Show, Generic)
instance Default StreamsInformation
instance Storable StreamsInformation where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: UINT32)]
  poke ptr_ StreamsInformation{..} = 
    void $ poke_ahead streamsInfoBufferSize >=> poke_ahead offsetToFirstStreamInfo $ ptr_
  peek = auto_peek StreamsInformation




-- Struct PRJ_PLACEHOLDER_INFO
data PRJ_PLACEHOLDER_INFO = PRJ_PLACEHOLDER_INFO {
  fileBasicInfo :: PRJ_FILE_BASIC_INFO, 
  eaInformation :: EaInformation, 
  securityInformation :: SecurityInformation, 
  streamsInformation :: StreamsInformation, 
  versionInfo :: PRJ_PLACEHOLDER_VERSION_INFO, 
  variableData :: StaticArray UArray 8 UINT8
}
  deriving (Show, Generic)
instance Default PRJ_PLACEHOLDER_INFO
instance Storable PRJ_PLACEHOLDER_INFO where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_FILE_BASIC_INFO), (alignment &&& sizeOf) (undefined :: EaInformation), (alignment &&& sizeOf) (undefined :: SecurityInformation), (alignment &&& sizeOf) (undefined :: StreamsInformation), (alignment &&& sizeOf) (undefined :: PRJ_PLACEHOLDER_VERSION_INFO), (alignment &&& sizeOf) (undefined :: StaticArray UArray 8 UINT8)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_FILE_BASIC_INFO), (alignment &&& sizeOf) (undefined :: EaInformation), (alignment &&& sizeOf) (undefined :: SecurityInformation), (alignment &&& sizeOf) (undefined :: StreamsInformation), (alignment &&& sizeOf) (undefined :: PRJ_PLACEHOLDER_VERSION_INFO), (alignment &&& sizeOf) (undefined :: StaticArray UArray 8 UINT8)]
  poke ptr_ PRJ_PLACEHOLDER_INFO{..} = 
    void $ poke_ahead fileBasicInfo >=> poke_ahead eaInformation >=> poke_ahead securityInformation >=> poke_ahead streamsInformation >=> poke_ahead versionInfo >=> poke_ahead variableData $ ptr_
  peek = auto_peek PRJ_PLACEHOLDER_INFO


-- Func PrjWritePlaceholderInfo
foreign import ccall unsafe "PrjWritePlaceholderInfo" c_PrjWritePlaceholderInfo :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> PCWSTR -> Ptr PRJ_PLACEHOLDER_INFO -> UINT32 -> IO HRESULT

prjWritePlaceholderInfo' namespaceVirtualizationContext destinationFileName placeholderInfo = 
  convert_result "prjWritePlaceholderInfo" $ prjWritePlaceholderInfo namespaceVirtualizationContext destinationFileName placeholderInfo

prjWritePlaceholderInfo namespaceVirtualizationContext destinationFileName placeholderInfo = 
  withTString destinationFileName $ \destinationFileName_ptr -> 
  withPtr placeholderInfo $ \placeholderInfo_ptr -> 
  c_PrjWritePlaceholderInfo namespaceVirtualizationContext destinationFileName_ptr placeholderInfo_ptr (fromIntegral . sizeOf $ placeholderInfo)


-- Enum PRJ_UPDATE_TYPES
type PRJ_UPDATE_TYPES = DWORD
type PRJ_UPDATE_NONE = 0x00000000
pRJ_UPDATE_NONE = 0x00000000 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_ALLOW_DIRTY_METADATA = 0x00000001
pRJ_UPDATE_ALLOW_DIRTY_METADATA = 0x00000001 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_ALLOW_DIRTY_DATA = 0x00000002
pRJ_UPDATE_ALLOW_DIRTY_DATA = 0x00000002 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_ALLOW_TOMBSTONE = 0x00000004
pRJ_UPDATE_ALLOW_TOMBSTONE = 0x00000004 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_RESERVED1 = 0x00000008
pRJ_UPDATE_RESERVED1 = 0x00000008 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_RESERVED2 = 0x00000010
pRJ_UPDATE_RESERVED2 = 0x00000010 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_ALLOW_READ_ONLY = 0x00000020
pRJ_UPDATE_ALLOW_READ_ONLY = 0x00000020 :: PRJ_UPDATE_TYPES
type PRJ_UPDATE_MAX_VAL = 0x00000040
pRJ_UPDATE_MAX_VAL = 0x00000040 :: PRJ_UPDATE_TYPES

-- Enum PRJ_UPDATE_FAILURE_CAUSES
type PRJ_UPDATE_FAILURE_CAUSES = DWORD
type PRJ_UPDATE_FAILURE_CAUSE_NONE = 0x00000000
pRJ_UPDATE_FAILURE_CAUSE_NONE = 0x00000000 :: PRJ_UPDATE_FAILURE_CAUSES
type PRJ_UPDATE_FAILURE_CAUSE_DIRTY_METADATA = 0x00000001
pRJ_UPDATE_FAILURE_CAUSE_DIRTY_METADATA = 0x00000001 :: PRJ_UPDATE_FAILURE_CAUSES
type PRJ_UPDATE_FAILURE_CAUSE_DIRTY_DATA = 0x00000002
pRJ_UPDATE_FAILURE_CAUSE_DIRTY_DATA = 0x00000002 :: PRJ_UPDATE_FAILURE_CAUSES
type PRJ_UPDATE_FAILURE_CAUSE_TOMBSTONE = 0x00000004
pRJ_UPDATE_FAILURE_CAUSE_TOMBSTONE = 0x00000004 :: PRJ_UPDATE_FAILURE_CAUSES
type PRJ_UPDATE_FAILURE_CAUSE_READ_ONLY = 0x00000008
pRJ_UPDATE_FAILURE_CAUSE_READ_ONLY = 0x00000008 :: PRJ_UPDATE_FAILURE_CAUSES

-- Func PrjUpdateFileIfNeeded
foreign import ccall unsafe "PrjUpdateFileIfNeeded" c_PrjUpdateFileIfNeeded :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> PCWSTR -> Ptr PRJ_PLACEHOLDER_INFO -> UINT32 -> PRJ_UPDATE_TYPES -> Ptr PRJ_UPDATE_FAILURE_CAUSES -> IO HRESULT

prjUpdateFileIfNeeded' namespaceVirtualizationContext destinationFileName placeholderInfo updateFlags = 
  convert_result "prjUpdateFileIfNeeded" $ prjUpdateFileIfNeeded namespaceVirtualizationContext destinationFileName placeholderInfo updateFlags

prjUpdateFileIfNeeded namespaceVirtualizationContext destinationFileName placeholderInfo updateFlags = 
  withTString destinationFileName $ \destinationFileName_ptr -> 
  withPtr placeholderInfo $ \placeholderInfo_ptr -> 
  alloca'  $ \failureReason_ptr -> do
  ret_ <- c_PrjUpdateFileIfNeeded namespaceVirtualizationContext destinationFileName_ptr placeholderInfo_ptr (fromIntegral . sizeOf $ placeholderInfo) (fromMaybe 0 updateFlags) failureReason_ptr
  failureReason_ret_ <- peek failureReason_ptr
  return (ret_, failureReason_ret_)


-- Func PrjDeleteFile
foreign import ccall unsafe "PrjDeleteFile" c_PrjDeleteFile :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> PCWSTR -> PRJ_UPDATE_TYPES -> Ptr PRJ_UPDATE_FAILURE_CAUSES -> IO HRESULT

prjDeleteFile' namespaceVirtualizationContext destinationFileName updateFlags = 
  convert_result "prjDeleteFile" $ prjDeleteFile namespaceVirtualizationContext destinationFileName updateFlags

prjDeleteFile namespaceVirtualizationContext destinationFileName updateFlags = 
  withTString destinationFileName $ \destinationFileName_ptr -> 
  alloca'  $ \failureReason_ptr -> do
  ret_ <- c_PrjDeleteFile namespaceVirtualizationContext destinationFileName_ptr (fromMaybe 0 updateFlags) failureReason_ptr
  failureReason_ret_ <- peek failureReason_ptr
  return (ret_, failureReason_ret_)


-- Func PrjWriteFileData
foreign import ccall unsafe "PrjWriteFileData" c_PrjWriteFileData :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> Ptr GUID -> Ptr () -> UINT64 -> UINT32 -> IO HRESULT

prjWriteFileData' namespaceVirtualizationContext dataStreamId buffer byteOffset = 
  convert_result "prjWriteFileData" $ prjWriteFileData namespaceVirtualizationContext dataStreamId buffer byteOffset

prjWriteFileData namespaceVirtualizationContext dataStreamId buffer byteOffset = 
  withPtr dataStreamId $ \dataStreamId_ptr -> 
  withByteStringPtr buffer $ \buffer_ptr -> 
  c_PrjWriteFileData namespaceVirtualizationContext dataStreamId_ptr buffer_ptr byteOffset (fromIntegral . sizeOf $ buffer)


-- Enum PRJ_FILE_STATE
type PRJ_FILE_STATE = DWORD
type PRJ_FILE_STATE_PLACEHOLDER = 0x00000001
pRJ_FILE_STATE_PLACEHOLDER = 0x00000001 :: PRJ_FILE_STATE
type PRJ_FILE_STATE_HYDRATED_PLACEHOLDER = 0x00000002
pRJ_FILE_STATE_HYDRATED_PLACEHOLDER = 0x00000002 :: PRJ_FILE_STATE
type PRJ_FILE_STATE_DIRTY_PLACEHOLDER = 0x00000004
pRJ_FILE_STATE_DIRTY_PLACEHOLDER = 0x00000004 :: PRJ_FILE_STATE
type PRJ_FILE_STATE_FULL = 0x00000008
pRJ_FILE_STATE_FULL = 0x00000008 :: PRJ_FILE_STATE
type PRJ_FILE_STATE_TOMBSTONE = 0x00000010
pRJ_FILE_STATE_TOMBSTONE = 0x00000010 :: PRJ_FILE_STATE

-- Func PrjGetOnDiskFileState
foreign import ccall unsafe "PrjGetOnDiskFileState" c_PrjGetOnDiskFileState :: 
  PCWSTR -> Ptr PRJ_FILE_STATE -> IO HRESULT

prjGetOnDiskFileState' destinationFileName = 
  convert_result "prjGetOnDiskFileState" $ prjGetOnDiskFileState destinationFileName

prjGetOnDiskFileState destinationFileName = 
  withTString destinationFileName $ \destinationFileName_ptr -> 
  alloca'  $ \fileState_ptr -> do
  ret_ <- c_PrjGetOnDiskFileState destinationFileName_ptr fileState_ptr
  fileState_ret_ <- peek fileState_ptr
  return (ret_, fileState_ret_)


-- Func PrjAllocateAlignedBuffer
foreign import ccall unsafe "PrjAllocateAlignedBuffer" c_PrjAllocateAlignedBuffer :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> ULONG64 -> IO (Ptr ())

prjAllocateAlignedBuffer namespaceVirtualizationContext size = 
  c_PrjAllocateAlignedBuffer namespaceVirtualizationContext size


-- Func PrjFreeAlignedBuffer
foreign import ccall unsafe "PrjFreeAlignedBuffer" c_PrjFreeAlignedBuffer :: 
  Ptr () -> IO ()

prjFreeAlignedBuffer buffer = 
  withPtr buffer $ \buffer_ptr -> 
  c_PrjFreeAlignedBuffer buffer_ptr


-- Enum PRJ_CALLBACK_DATA_FLAGS
type PRJ_CALLBACK_DATA_FLAGS = DWORD
type PRJ_CB_DATA_FLAG_ENUM_RESTART_SCAN = 0x00000001
pRJ_CB_DATA_FLAG_ENUM_RESTART_SCAN = 0x00000001 :: PRJ_CALLBACK_DATA_FLAGS
type PRJ_CB_DATA_FLAG_ENUM_RETURN_SINGLE_ENTRY = 0x00000002
pRJ_CB_DATA_FLAG_ENUM_RETURN_SINGLE_ENTRY = 0x00000002 :: PRJ_CALLBACK_DATA_FLAGS



-- Struct PRJ_CALLBACK_DATA
data PRJ_CALLBACK_DATA = PRJ_CALLBACK_DATA {
  size :: UINT32, 
  flags :: PRJ_CALLBACK_DATA_FLAGS, 
  namespaceVirtualizationContext :: PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT, 
  commandId :: INT32, 
  fileId :: GUID, 
  dataStreamId :: GUID, 
  filePathName :: PCWSTR, 
  versionInfo :: Ptr PRJ_PLACEHOLDER_VERSION_INFO, 
  triggeringProcessId :: UINT32, 
  triggeringProcessImageFileName :: PCWSTR, 
  instanceContext :: Ptr ()
}
  deriving (Show, Generic)
instance Default PRJ_CALLBACK_DATA
instance Storable PRJ_CALLBACK_DATA where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: PRJ_CALLBACK_DATA_FLAGS), (alignment &&& sizeOf) (undefined :: PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT), (alignment &&& sizeOf) (undefined :: INT32), (alignment &&& sizeOf) (undefined :: GUID), (alignment &&& sizeOf) (undefined :: GUID), (alignment &&& sizeOf) (undefined :: PCWSTR), (alignment &&& sizeOf) (undefined :: Ptr PRJ_PLACEHOLDER_VERSION_INFO), (alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: PCWSTR), (alignment &&& sizeOf) (undefined :: Ptr ())]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: PRJ_CALLBACK_DATA_FLAGS), (alignment &&& sizeOf) (undefined :: PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT), (alignment &&& sizeOf) (undefined :: INT32), (alignment &&& sizeOf) (undefined :: GUID), (alignment &&& sizeOf) (undefined :: GUID), (alignment &&& sizeOf) (undefined :: PCWSTR), (alignment &&& sizeOf) (undefined :: Ptr PRJ_PLACEHOLDER_VERSION_INFO), (alignment &&& sizeOf) (undefined :: UINT32), (alignment &&& sizeOf) (undefined :: PCWSTR), (alignment &&& sizeOf) (undefined :: Ptr ())]
  poke ptr_ PRJ_CALLBACK_DATA{..} = 
    void $ poke_ahead size >=> poke_ahead flags >=> poke_ahead namespaceVirtualizationContext >=> poke_ahead commandId >=> poke_ahead fileId >=> poke_ahead dataStreamId >=> poke_ahead filePathName >=> poke_ahead versionInfo >=> poke_ahead triggeringProcessId >=> poke_ahead triggeringProcessImageFileName >=> poke_ahead instanceContext $ ptr_
  peek = auto_peek PRJ_CALLBACK_DATA


-- FuncType PRJ_START_DIRECTORY_ENUMERATION_CB
type PRJ_START_DIRECTORY_ENUMERATION_CB = Ptr PRJ_CALLBACK_DATA -> Ptr GUID -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_START_DIRECTORY_ENUMERATION_CB :: PRJ_START_DIRECTORY_ENUMERATION_CB -> IO (FunPtr PRJ_START_DIRECTORY_ENUMERATION_CB)
mkPRJ_START_DIRECTORY_ENUMERATION_CB fun_ = mk0PRJ_START_DIRECTORY_ENUMERATION_CB $ \ callbackData enumerationId -> do
  callbackData_v <- peek callbackData
  enumerationId_v <- peek enumerationId
  fun_ callbackData_v enumerationId_v

-- FuncType PRJ_GET_DIRECTORY_ENUMERATION_CB
type PRJ_GET_DIRECTORY_ENUMERATION_CB = Ptr PRJ_CALLBACK_DATA -> Ptr GUID -> PCWSTR -> PRJ_DIR_ENTRY_BUFFER_HANDLE -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_GET_DIRECTORY_ENUMERATION_CB :: PRJ_GET_DIRECTORY_ENUMERATION_CB -> IO (FunPtr PRJ_GET_DIRECTORY_ENUMERATION_CB)
mkPRJ_GET_DIRECTORY_ENUMERATION_CB fun_ = mk0PRJ_GET_DIRECTORY_ENUMERATION_CB $ \ callbackData enumerationId searchExpression dirEntryBufferHandle -> do
  callbackData_v <- peek callbackData
  enumerationId_v <- peek enumerationId
  fun_ callbackData_v enumerationId_v searchExpression dirEntryBufferHandle

-- FuncType PRJ_END_DIRECTORY_ENUMERATION_CB
type PRJ_END_DIRECTORY_ENUMERATION_CB = Ptr PRJ_CALLBACK_DATA -> Ptr GUID -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_END_DIRECTORY_ENUMERATION_CB :: PRJ_END_DIRECTORY_ENUMERATION_CB -> IO (FunPtr PRJ_END_DIRECTORY_ENUMERATION_CB)
mkPRJ_END_DIRECTORY_ENUMERATION_CB fun_ = mk0PRJ_END_DIRECTORY_ENUMERATION_CB $ \ callbackData enumerationId -> do
  callbackData_v <- peek callbackData
  enumerationId_v <- peek enumerationId
  fun_ callbackData_v enumerationId_v

-- FuncType PRJ_GET_PLACEHOLDER_INFO_CB
type PRJ_GET_PLACEHOLDER_INFO_CB = Ptr PRJ_CALLBACK_DATA -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_GET_PLACEHOLDER_INFO_CB :: PRJ_GET_PLACEHOLDER_INFO_CB -> IO (FunPtr PRJ_GET_PLACEHOLDER_INFO_CB)
mkPRJ_GET_PLACEHOLDER_INFO_CB fun_ = mk0PRJ_GET_PLACEHOLDER_INFO_CB $ \ callbackData -> do
  callbackData_v <- peek callbackData
  fun_ callbackData_v

-- FuncType PRJ_GET_FILE_DATA_CB
type PRJ_GET_FILE_DATA_CB = Ptr PRJ_CALLBACK_DATA -> UINT64 -> UINT32 -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_GET_FILE_DATA_CB :: PRJ_GET_FILE_DATA_CB -> IO (FunPtr PRJ_GET_FILE_DATA_CB)
mkPRJ_GET_FILE_DATA_CB fun_ = mk0PRJ_GET_FILE_DATA_CB $ \ callbackData byteOffset length -> do
  callbackData_v <- peek callbackData
  fun_ callbackData_v byteOffset length

-- FuncType PRJ_QUERY_FILE_NAME_CB
type PRJ_QUERY_FILE_NAME_CB = Ptr PRJ_CALLBACK_DATA -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_QUERY_FILE_NAME_CB :: PRJ_QUERY_FILE_NAME_CB -> IO (FunPtr PRJ_QUERY_FILE_NAME_CB)
mkPRJ_QUERY_FILE_NAME_CB fun_ = mk0PRJ_QUERY_FILE_NAME_CB $ \ callbackData -> do
  callbackData_v <- peek callbackData
  fun_ callbackData_v

-- Union PRJ_NOTIFICATION_PARAMETERS
data PRJ_NOTIFICATION_PARAMETERS = PostCreate {
  notificationMask :: PRJ_NOTIFY_TYPES
} | FileRenamed {
  notificationMask :: PRJ_NOTIFY_TYPES
} | FileDeletedOnHandleClose {
  isFileModified :: BOOLEAN
}
  deriving (Show, Generic)
instance Default PRJ_NOTIFICATION_PARAMETERS where def = undefined
instance Storable PRJ_NOTIFICATION_PARAMETERS where
  sizeOf _ = maximum . map sizeOfStruct $ [[(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES)], [(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES)], [(alignment &&& sizeOf) (undefined :: BOOLEAN)]]
  alignment _ = maximum . map alignmentOfStruct $ [[(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES)], [(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES)], [(alignment &&& sizeOf) (undefined :: BOOLEAN)]]
  peek = undefined
  poke ptr_ PostCreate{..} = 
    void $ poke_ahead notificationMask $ ptr_
  poke ptr_ FileRenamed{..} = 
    void $ poke_ahead notificationMask $ ptr_
  poke ptr_ FileDeletedOnHandleClose{..} = 
    void $ poke_ahead isFileModified $ ptr_

-- FuncType PRJ_NOTIFICATION_CB
type PRJ_NOTIFICATION_CB = Ptr PRJ_CALLBACK_DATA -> BOOLEAN -> PRJ_NOTIFICATION -> PCWSTR -> Ptr PRJ_NOTIFICATION_PARAMETERS -> IO HRESULT
foreign import ccall "wrapper" mk0PRJ_NOTIFICATION_CB :: PRJ_NOTIFICATION_CB -> IO (FunPtr PRJ_NOTIFICATION_CB)
mkPRJ_NOTIFICATION_CB fun_ = mk0PRJ_NOTIFICATION_CB $ \ callbackData isDirectory notification destinationFileName operationParameters -> do
  callbackData_v <- peek callbackData
  operationParameters_v <- peek operationParameters
  fun_ callbackData_v isDirectory notification destinationFileName operationParameters_v

-- FuncType PRJ_CANCEL_COMMAND_CB
type PRJ_CANCEL_COMMAND_CB = Ptr PRJ_CALLBACK_DATA -> IO ()
foreign import ccall "wrapper" mk0PRJ_CANCEL_COMMAND_CB :: PRJ_CANCEL_COMMAND_CB -> IO (FunPtr PRJ_CANCEL_COMMAND_CB)
mkPRJ_CANCEL_COMMAND_CB fun_ = mk0PRJ_CANCEL_COMMAND_CB $ \ callbackData -> do
  callbackData_v <- peek callbackData
  fun_ callbackData_v



-- Struct PRJ_CALLBACKS
data PRJ_CALLBACKS = PRJ_CALLBACKS {
  startDirectoryEnumerationCallback :: FunPtr PRJ_START_DIRECTORY_ENUMERATION_CB, 
  endDirectoryEnumerationCallback :: FunPtr PRJ_END_DIRECTORY_ENUMERATION_CB, 
  getDirectoryEnumerationCallback :: FunPtr PRJ_GET_DIRECTORY_ENUMERATION_CB, 
  getPlaceholderInfoCallback :: FunPtr PRJ_GET_PLACEHOLDER_INFO_CB, 
  getFileDataCallback :: FunPtr PRJ_GET_FILE_DATA_CB, 
  queryFileNameCallback :: FunPtr PRJ_QUERY_FILE_NAME_CB, 
  notificationCallback :: FunPtr PRJ_NOTIFICATION_CB, 
  cancelCommandCallback :: FunPtr PRJ_CANCEL_COMMAND_CB
}
  deriving (Show, Generic)
instance Default PRJ_CALLBACKS
instance Storable PRJ_CALLBACKS where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: FunPtr PRJ_START_DIRECTORY_ENUMERATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_END_DIRECTORY_ENUMERATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_GET_DIRECTORY_ENUMERATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_GET_PLACEHOLDER_INFO_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_GET_FILE_DATA_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_QUERY_FILE_NAME_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_NOTIFICATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_CANCEL_COMMAND_CB)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: FunPtr PRJ_START_DIRECTORY_ENUMERATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_END_DIRECTORY_ENUMERATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_GET_DIRECTORY_ENUMERATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_GET_PLACEHOLDER_INFO_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_GET_FILE_DATA_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_QUERY_FILE_NAME_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_NOTIFICATION_CB), (alignment &&& sizeOf) (undefined :: FunPtr PRJ_CANCEL_COMMAND_CB)]
  poke ptr_ PRJ_CALLBACKS{..} = 
    void $ poke_ahead startDirectoryEnumerationCallback >=> poke_ahead endDirectoryEnumerationCallback >=> poke_ahead getDirectoryEnumerationCallback >=> poke_ahead getPlaceholderInfoCallback >=> poke_ahead getFileDataCallback >=> poke_ahead queryFileNameCallback >=> poke_ahead notificationCallback >=> poke_ahead cancelCommandCallback $ ptr_
  peek = auto_peek PRJ_CALLBACKS


-- Enum PRJ_COMPLETE_COMMAND_TYPE
type PRJ_COMPLETE_COMMAND_TYPE = DWORD
type PRJ_COMPLETE_COMMAND_TYPE_NOTIFICATION = 1
pRJ_COMPLETE_COMMAND_TYPE_NOTIFICATION = 1 :: PRJ_COMPLETE_COMMAND_TYPE
type PRJ_COMPLETE_COMMAND_TYPE_ENUMERATION = 2
pRJ_COMPLETE_COMMAND_TYPE_ENUMERATION = 2 :: PRJ_COMPLETE_COMMAND_TYPE


-- Union DUMMYUNIONNAME
data DUMMYUNIONNAME = Notification {
  notificationMask :: PRJ_NOTIFY_TYPES
} | Enumeration {
  dirEntryBufferHandle :: PRJ_DIR_ENTRY_BUFFER_HANDLE
}
  deriving (Show, Generic)
instance Default DUMMYUNIONNAME where def = undefined
instance Storable DUMMYUNIONNAME where
  sizeOf _ = maximum . map sizeOfStruct $ [[(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES)], [(alignment &&& sizeOf) (undefined :: PRJ_DIR_ENTRY_BUFFER_HANDLE)]]
  alignment _ = maximum . map alignmentOfStruct $ [[(alignment &&& sizeOf) (undefined :: PRJ_NOTIFY_TYPES)], [(alignment &&& sizeOf) (undefined :: PRJ_DIR_ENTRY_BUFFER_HANDLE)]]
  peek = undefined
  poke ptr_ Notification{..} = 
    void $ poke_ahead notificationMask $ ptr_
  poke ptr_ Enumeration{..} = 
    void $ poke_ahead dirEntryBufferHandle $ ptr_


-- Struct PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS
data PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS = PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS {
  commandType :: PRJ_COMPLETE_COMMAND_TYPE, 
  dUMMYUNIONNAME :: DUMMYUNIONNAME
}
  deriving (Show, Generic)
instance Default PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS
instance Storable PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS where
  sizeOf _ = sizeOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_COMPLETE_COMMAND_TYPE), (alignment &&& sizeOf) (undefined :: DUMMYUNIONNAME)]
  alignment _ = alignmentOfStruct [(alignment &&& sizeOf) (undefined :: PRJ_COMPLETE_COMMAND_TYPE), (alignment &&& sizeOf) (undefined :: DUMMYUNIONNAME)]
  poke ptr_ PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS{..} = 
    void $ poke_ahead commandType >=> poke_ahead dUMMYUNIONNAME $ ptr_
  peek = auto_peek PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS


-- Func PrjCompleteCommand
foreign import ccall unsafe "PrjCompleteCommand" c_PrjCompleteCommand :: 
  PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT -> INT32 -> HRESULT -> Ptr PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS -> IO HRESULT

prjCompleteCommand' namespaceVirtualizationContext commandId completionResult extendedParameters = 
  convert_result "prjCompleteCommand" $ prjCompleteCommand namespaceVirtualizationContext commandId completionResult extendedParameters

prjCompleteCommand namespaceVirtualizationContext commandId completionResult extendedParameters = 
  withMaybe extendedParameters $ \extendedParameters_ptr -> 
  c_PrjCompleteCommand namespaceVirtualizationContext commandId completionResult extendedParameters_ptr


-- Func PrjFillDirEntryBuffer
foreign import ccall unsafe "PrjFillDirEntryBuffer" c_PrjFillDirEntryBuffer :: 
  PCWSTR -> Ptr PRJ_FILE_BASIC_INFO -> PRJ_DIR_ENTRY_BUFFER_HANDLE -> IO HRESULT

prjFillDirEntryBuffer' fileName fileBasicInfo dirEntryBufferHandle = 
  convert_result "prjFillDirEntryBuffer" $ prjFillDirEntryBuffer fileName fileBasicInfo dirEntryBufferHandle

prjFillDirEntryBuffer fileName fileBasicInfo dirEntryBufferHandle = 
  withTString fileName $ \fileName_ptr -> 
  withMaybe fileBasicInfo $ \fileBasicInfo_ptr -> 
  c_PrjFillDirEntryBuffer fileName_ptr fileBasicInfo_ptr dirEntryBufferHandle


-- Func PrjFileNameMatch
foreign import ccall unsafe "PrjFileNameMatch" c_PrjFileNameMatch :: 
  PCWSTR -> PCWSTR -> IO BOOLEAN

prjFileNameMatch fileNameToCheck pattern0 = 
  withTString fileNameToCheck $ \fileNameToCheck_ptr -> 
  withTString pattern0 $ \pattern0_ptr -> 
  c_PrjFileNameMatch fileNameToCheck_ptr pattern0_ptr


-- Func PrjFileNameCompare
foreign import ccall unsafe "PrjFileNameCompare" c_PrjFileNameCompare :: 
  PCWSTR -> PCWSTR -> IO Int

prjFileNameCompare fileName1 fileName2 = 
  withTString fileName1 $ \fileName1_ptr -> 
  withTString fileName2 $ \fileName2_ptr -> 
  c_PrjFileNameCompare fileName1_ptr fileName2_ptr


-- Func PrjDoesNameContainWildCards
foreign import ccall unsafe "PrjDoesNameContainWildCards" c_PrjDoesNameContainWildCards :: 
  LPCWSTR -> IO BOOLEAN

prjDoesNameContainWildCards fileName = 
  withTString fileName $ \fileName_ptr -> 
  c_PrjDoesNameContainWildCards fileName_ptr

